<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssginc.unnie.review.mapper.ReviewMapper">

    <!-- 1) 리뷰 등록 -->
    <insert id="insertReview" useGeneratedKeys="true" keyProperty="reviewId"
            parameterType="com.ssginc.unnie.review.dto.ReviewCreateRequest">
        INSERT INTO review
        (review_member_id,
         review_receipt_id,
         review_image,
         review_rate,
         review_content)
        VALUES (#{reviewMemberId},
                #{reviewReceiptId},
                #{reviewImage},
                #{reviewRate},
                #{reviewContent})
    </insert>

    <!-- 2) 리뷰-키워드 연결 정보 등록 (생성용) -->
    <insert id="insertReviewKeywordsForCreate" parameterType="com.ssginc.unnie.review.dto.ReviewCreateRequest">
        INSERT INTO review_keyword (keyword_id, review_id)
        VALUES
        <foreach collection="keywordId" item="keywordId" separator=",">
            (#{keywordId}, #{reviewId})
        </foreach>
    </insert>

    <!-- 3) 리뷰에 연결된 키워드 목록 조회 -->
    <select id="selectReviewKeywordsByReviewId" resultType="java.lang.String" parameterType="long">
        SELECT k.keyword
        FROM review_keyword rk
                 JOIN keywords k ON rk.keyword_id = k.keyword_id
        WHERE rk.review_id = #{reviewId}
    </select>

    <!-- 4) 리뷰 상세 조회 -->
    <select id="getReviewById" resultType="com.ssginc.unnie.review.dto.ReviewGetResponse" parameterType="long">
        SELECT r.review_id         AS reviewId,
               r.review_member_id  AS reviewMemberId,
               r.review_receipt_id AS reviewReceiptId,
               r.review_image      AS reviewImage,
               r.review_rate       AS reviewRate,
               r.review_content    AS reviewContent,
               r.review_date       AS reviewDate,
               m.member_nickname   AS memberNickName,
               s.shop_name         AS shopName
        FROM review r
                 JOIN member m ON r.review_member_id = m.member_id
                 JOIN receipt rc ON r.review_receipt_id = rc.receipt_id
                 JOIN shop s ON rc.receipt_shop_id = s.shop_id
        WHERE r.review_id = #{reviewId}
          AND r.review_status = 0
    </select>

    <!-- 5) 리뷰 수정 -->
    <update id="updateReview" parameterType="com.ssginc.unnie.review.dto.ReviewUpdateRequest" keyProperty="reviewId"
            keyColumn="review_id">
        UPDATE review
        <set>
            review_rate = #{reviewRate},
            review_content = #{reviewContent},
            review_date = CURRENT_TIMESTAMP
            <if test="reviewImage != null and reviewImage != ''">
                , review_image = #{reviewImage}
            </if>
        </set>
        WHERE review_id = #{reviewId}
    </update>

    <!-- 6) 리뷰 수정 시 기존의 키워드 관계 삭제 -->
    <delete id="deleteReviewKeywords" parameterType="long">
        DELETE
        FROM review_keyword
        WHERE review_id = #{reviewId}
    </delete>

    <!-- 7) 리뷰-키워드 연결 정보 등록 (수정용) -->
    <insert id="insertReviewKeywordsForUpdate" parameterType="com.ssginc.unnie.review.dto.ReviewUpdateRequest">
        INSERT INTO review_keyword (keyword_id, review_id)
        VALUES
        <foreach collection="keywordId" item="keywordId" separator=",">
            (#{keywordId}, #{reviewId})
        </foreach>
    </insert>

    <!-- 8) 리뷰 소프트 딜리트 -->
    <update id="softDeleteReview" parameterType="map">
        UPDATE review
        SET review_status = #{reviewStatus},
            review_date   = CURRENT_TIMESTAMP
        WHERE review_id = #{reviewId}
    </update>

    <!-- 9) 리뷰 존재 여부 확인 -->
    <select id="existsReview" resultType="boolean" parameterType="long">
        SELECT EXISTS (SELECT 1
                       FROM review
                       WHERE review_id = #{reviewId}
                         AND review_status = 0)
    </select>

    <!-- 10) 리뷰 소유자 확인 -->
    <select id="checkReviewAndAuthor" resultType="java.lang.Integer">
        SELECT CASE
                   WHEN COUNT(review_id) = 0 THEN -1 -- 리뷰가 존재하지 않으면 -1 반환
                   WHEN review_member_id != #{reviewMemberId} THEN 0 -- 작성자가 아니면 0 반환
                   ELSE 1 -- 작성자가 맞으면 1 반환
                   END AS ownership
        FROM review
        WHERE review_id = #{reviewId}
          AND review_status = 0
    </select>

    <!-- 11) 업체 리뷰 목록 조회 -->
    <select id="getReviewListByShop" resultType="com.ssginc.unnie.review.dto.ReviewGetResponse">
        SELECT
        r.review_id AS reviewId,
        r.review_member_id AS reviewMemberId,
        r.review_receipt_id AS reviewReceiptId,
        r.review_image AS reviewImage,
        r.review_rate AS reviewRate,
        r.review_content AS reviewContent,
        r.review_date AS reviewDate,
        m.member_nickname AS memberNickName,
        s.shop_name AS shopName,
        GROUP_CONCAT(DISTINCT k.keyword SEPARATOR ', ') AS reviewKeyword
        FROM review r
        JOIN receipt rc ON r.review_receipt_id = rc.receipt_id
        JOIN shop s ON rc.receipt_shop_id = s.shop_id
        JOIN member m ON r.review_member_id = m.member_id
        LEFT JOIN review_keyword rk ON r.review_id = rk.review_id
        LEFT JOIN keywords k ON rk.keyword_id = k.keyword_id
        WHERE r.review_status = 0
        AND s.shop_id = #{shopId}
        <!-- 키워드 필터 적용: 사용자가 선택한 키워드가 있을 경우, 해당 키워드들만 포함된 리뷰를 조회 -->
        <if test="keyword != null and keyword != ''">
            AND k.keyword IN
            <foreach collection="keyword.split(',')" item="keyword" open="(" separator="," close=")">
                #{keyword}
            </foreach>
        </if>
        GROUP BY r.review_id
        <choose>
            <when test="sortType == 'newest'">
                ORDER BY r.review_date DESC
            </when>
            <when test="sortType == 'oldest'">
                ORDER BY r.review_date ASC
            </when>
            <otherwise>
                ORDER BY r.review_date DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{limit}
    </select>


    <!-- 업체 리뷰 개수 조회 -->
    <select id="getReviewCountByShop" resultType="int">
        SELECT
        COUNT(DISTINCT r.review_id)
        FROM review r
        JOIN receipt rc ON r.review_receipt_id = rc.receipt_id
        JOIN shop s ON rc.receipt_shop_id = s.shop_id
        LEFT JOIN review_keyword rk ON r.review_id = rk.review_id
        LEFT JOIN keywords k ON rk.keyword_id = k.keyword_id
        WHERE r.review_status = 0
        AND s.shop_id = #{shopId}
        <if test="keyword != null and keyword != ''">
            AND k.keyword = #{keyword}
        </if>
    </select>

</mapper>
