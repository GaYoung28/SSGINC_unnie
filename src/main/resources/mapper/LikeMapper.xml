<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssginc.unnie.like.mapper.LikeMapper">

    <!-- 좋아요 취소  -->
    <delete id="deleteLike">
        DELETE
        FROM `like`
        WHERE like_id = #{likeId}
          AND like_member_id = #{likeMemberId}
    </delete>

    <!-- 게시글 상세 화면에서 좋아요 여부 확인  -->
    <select id="getLikeStatus" resultType="java.lang.Integer">
        SELECT EXISTS(
            SELECT 1
            FROM `like`
            WHERE like_target_type = #{likeTargetType}
              AND like_target_id = #{likeTargetId}
              AND like_member_id = #{likeMemberId}
        ) AS liked
    </select>

    <!-- like_member_id 와 유저 일치 여부 확인 -->
    <select id="checkLikeAndMemberId" resultType="java.lang.Integer">
        SELECT
          CASE
            WHEN COUNT(like_id) = 0 THEN -1
            WHEN like_member_id != #{likeMemberId} THEN 0
            ELSE 1
            END AS "ownership"
        FROM `like`
        WHERE like_id = #{likeId}
    </select>

    <!-- 좋아요 타켓 타입과 타겟 식별번호로 타겟 대상 작성자 정보 가져오기   -->
    <select id="getLikeTargetMemberInfoByTargetInfo"
            resultType="com.ssginc.unnie.notification.dto.NotificationResponse">
        SELECT
            m.member_id AS receiverId,
            m.member_nickname AS receiverNickname,
            CASE
                WHEN #{likeTargetType} = 'BOARD' THEN
                    (SELECT b.board_title FROM board b WHERE b.board_id = #{likeTargetId})
                WHEN #{likeTargetType} = 'COMMENT' THEN
                    (SELECT c.comment_contents FROM comment c WHERE c.comment_id = #{likeTargetId})
                WHEN #{likeTargetType} = 'REVIEW' THEN
                    (SELECT r.review_content FROM review r WHERE r.review_id = #{likeTargetId})
            END AS targetTitle
        FROM member m
        WHERE m.member_id = (
            CASE
                WHEN #{likeTargetType} = 'BOARD' THEN
                    (SELECT b.board_author FROM board b WHERE b.board_id = #{likeTargetId})
                WHEN #{likeTargetType} = 'COMMENT' THEN
                    (SELECT c.comment_member_id FROM comment c WHERE c.comment_id = #{likeTargetId})
                WHEN #{likeTargetType} = 'REVIEW' THEN
                    (SELECT s.shop_member_id
                     FROM review r
                        JOIN receipt re ON (r.review_receipt_id = re.receipt_id)
                        JOIN shop s ON (re.receipt_shop_id = s.shop_id)
                     WHERE r.review_id = #{likeTargetId})
                END
            )
    </select>

    <!-- 댓글 좋아요 시 댓글 달린 게시글 식별 번호 가져옴   -->
    <select id="getBoardIdByCommentTargetId" resultType="java.lang.Long">
        SELECT c.comment_board_id
        FROM `like` l
            JOIN comment c ON (l.like_target_id = c.comment_id)
        WHERE like_id = #{likeId}
            AND c.comment_isactive = 1
    </select>

    <!-- 좋아요 추가  -->
    <insert id="createLike" useGeneratedKeys="true" keyProperty="likeId" keyColumn="like_id">
        INSERT INTO `like`
        (
         like_target_type,
         like_target_id,
         like_member_id
        )
        VALUES
        (
         #{likeTargetType},
         #{likeTargetId},
         #{likeMemberId}
        )
    </insert>
</mapper>